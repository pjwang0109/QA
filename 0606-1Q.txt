// 狀態變數
let yearList = [];
const maxYears = 3;

// 新增年份
function addYearDataUnit(obj) {
  const $input = $('#year-input');
  const year = parseInt($input.val());

  if (isNaN(year)) {
    alert('請輸入有效的年份');
    return;
  }

  if (yearList.includes(year)) {
    alert('該年份已存在');
    return;
  }

  if (yearList.length >= maxYears) {
    alert('最多只能新增 3 個年份');
    return;
  }

  yearList.push(year);
  yearList.sort(); // 排序

  updateTableHeader($(obj));
  updateProductRows();

  $input.val(year + 1); // 自動 +1
}

// 更新表格標題列
function updateTableHeader($trigger) {
  const $header = $('#table-header');
  $header.find('th.year-col').remove(); // 清除舊欄位

  $.each(yearList, function (_, year) {
    const $th = $(`
      <th class="year-col year-col-${year}">
        <div class="form-inline year-${year}">
          <input type="text" style="width:100px" class="form-control product-year yy-1 form-digit-5 text-center" name="product-year" readonly/>
          <span class="input-group-addon">年</span>
          <button class="btn btn-danger" onclick="delete401Unit(this)">
            <i class="fa fa-times"></i>
          </button>
        </div>
      </th>
    `);

    $th.find('.product-year').val(year);
    insertSortedColumn($header, $th, year);
  });
}

// 更新產品資料列
function updateProductRows() {
  $('#product-body .product-row').each(function () {
    const $row = $(this);
    $row.find('td.year-col').remove(); // 清除原有金額欄位

    $.each(yearList, function (_, year) {
      const $td = $(`
        <td class="year-col year-col-${year}">
          <div class="form-inline ${year}">
            <input type="text" maxlength="3" style="width: 114px" class="form-control rate1"/>
            <span class="input-group-text">%</span>
          </div>
        </td>
      `);
      insertSortedColumn($row, $td, year);
    });
  });
}

// 依照年份排序插入欄位
function insertSortedColumn($parent, $element, year) {
  let inserted = false;

  $parent.children('th.year-col, td.year-col').each(function () {
    const currentYearText = $(this).find('.product-year').val() || $(this).text();
    const currentYear = parseInt(currentYearText);

    if (!isNaN(currentYear) && year < currentYear) {
      $(this).before($element);
      inserted = true;
      return false; // break
    }
  });

  if (!inserted) {
    $parent.append($element);
  }
}

// 新增產品列
function addProductTableData() {
  const $row = $('<tr class="product-row"></tr>');

  $row.append(`
    <td class="d-flex">
      <button class="btn btn-danger me-2" onclick="delete401Unit(this)">
        <i class="fa fa-times"></i>
      </button>
      <textarea class="form-control pname" rows="1" placeholder="產品名稱"></textarea>
    </td>
    <td style="vertical-align:middle">佔營收比</td>
  `);

  $.each(yearList, function (_, year) {
    const $td = $(`
      <td class="year-col year-col-${year}">
        <div class="form-inline ${year}">
          <input type="text" maxlength="3" style="width: 114px" class="form-control rate1"/>
          <span class="input-group-text">%</span>
        </div>
      </td>
    `);
    insertSortedColumn($row, $td, year);
  });

  $('#product-body').append($row);
}
