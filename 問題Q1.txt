1 一個是基本在做頁面時的 新增年份 刪除年份 更新產品資料列 依照年份排序插入欄位 新增產品列 刪除產品列
2另一個就是在暫存之後 取出來的畫面(會使用到的方法包含addPrimaryProductTableDataCR set401PageDataCR) 他們都需共用 (新增年份 刪除年份 更新產品資料列 依照年份排序插入欄位 新增產品列 刪除產品列)方法，取出來的畫面需要可以顯示欄位以及存放暫存的資料
3而且每個頁面的 yearList 限制都一樣 也不會互相影響 因為他們是獨立的

這並沒有將 table 欄位顯示出來，儲存的資料也沒有存進去 ，請幫我修改所有方法
//主要產品營收比重
        let mpritemArr = dataObj["401mpritem"] || [];
        const addMprItemBtn = $target.find(".product-add-btn:first");
        const $productDiv = $target.find(".primaryProductDiv");
        const $mprTable = $productDiv.find("table");

        mpritemArr = mpritemArr.sort((a, b) => {
            const aN = Number(a["dataseq"]);
            const bN = Number(b["dataseq"]);
            return aN - bN;
        });

        // 先統整出所有年份，並儲存在該表格的 data 屬性中
        if (mpritemArr.length > 0) {
            const yearSet = new Set();

            $.each(mpritemArr, function (_, item) {
                $.each(item.year_rate || {}, function (year, _) {
                    yearSet.add(parseInt(year));
                });
            });

            const yearList = Array.from(yearSet).sort((a, b) => a - b);

            setYearList($productDiv, yearList);       // ⭐ 設定年份
            updateTableHeader($productDiv);           // ⭐ 畫出 <th>
        }

        for (const v of mpritemArr) {
            await addPrimaryProductTableDataCR(addMprItemBtn, v); // ⭐ 必須等年份列先畫好，才能正常畫每一列
        }



//取得連動:主要產品營收比重  ** addPrimaryProductTableData
function addPrimaryProductTableDataCR($triggerBtn, item) {
    const $container = $triggerBtn.closest('.card-body');
    const yearList = getYearList($container);
    const $row = $('<tr class="product-row"></tr>');

    $row.append(`
        <td class="d-flex">
            <button class="btn btn-danger mr-2 del-pro-btn" onclick="deleteProductsUnit(this)">
                <i class="fa fa-times"></i>
            </button>
            <textarea class="form-control pname" rows="1">${item.name || ''}</textarea>
        </td>
        <td style="vertical-align:middle" class="text-center">佔營收比</td>
    `);

    $.each(yearList, function (i, year) {
        const rate = item.year_rate?.[year] || '';
        const rateN = i + 1;

        const $td = $(`
            <td class="year-col year-col-${year}">
                <div class="form-inline rate-${year}">
                    <input type="text" maxlength="3" style="width: 114px" 
                           class="form-control rate-input rate-${rateN}" value="${rate}" />
                    <span class="input-group-text">%</span>
                </div>
            </td>
        `);

        insertSortedColumn($row, $td, year);
    });

    $container.find('#product-body').append($row);
}


function getYearList($container) {
    return $container.data('yearList') || [];
}

function setYearList($container, yearList) {
    $container.data('yearList', yearList);
}

//新增年份
function addYearDataUnit(obj) {
    const $input = $(obj).closest('.d-flex').find('.infoYearData');
    const year = parseInt($input.val());
    const maxYears = 3;
    const $cardBody = $(obj).closest('.card-body');
    let yearList = getYearList($cardBody);

    if (isNaN(year)) {
        alert('請輸入數字');
        $input.val("");
        return;
    }

    if (yearList.length >= maxYears) {
        alert('已達3個');
        return;
    }

    if (yearList.includes(year)) {
        alert('此年份已存在');
        return;
    }

    yearList.push(year);
    yearList.sort((a, b) => a - b);
    setYearList($cardBody, yearList);

    updateTableHeader($cardBody);
    updateProductRows($cardBody);

    $input.val(year + 1);
}

//刪除年份
function deleteYearUnit(obj) {
    const $th = $(obj).closest('th');
    const year = parseInt($th.find('input.product-year').val());
    const $cardBody = $(obj).closest('.card-body');

    let yearList = getYearList($cardBody);
    yearList = yearList.filter(y => y !== year);
    yearList.sort((a, b) => a - b);
    setYearList($cardBody, yearList);

    $cardBody.find(`.year-col-${year}`).remove();

    $cardBody.find('.product-year').each(function (index) {
        const updateClass = $(this).attr('class').split(' ').filter(cls => !/^yy-\d+$/.test(cls)).join(' ');
        $(this).attr('class', updateClass + ` yy-${index + 1}`);
    });

    const columnCount = yearList.length;
    $cardBody.find('#product-body .product-row').each(function () {
        const $rateInputs = $(this).find('.rate-input');
        for (let colIndex = 0; colIndex < columnCount; colIndex++) {
            const $input = $rateInputs.eq(colIndex);
            if ($input.length) {
                const updatedClass = $input.attr('class').split(' ').filter(cls => !/^rate-\d+$/.test(cls)).join(' ');
                $input.attr('class', `${updatedClass} rate-${colIndex + 1}`);
            }
        }
    });
}


//更新表格標題列
function updateTableHeader($trigger) {
    const $cardBody = $trigger.closest('.card-body');
    const yearList = getYearList($cardBody);
    const $header = $cardBody.find('#table-header');
    $header.find('th.year-col').remove();

    $.each(yearList, function (i, year) {
        const $th = $(`
        <th class="year-col year-col-${year}">
            <div class="form-inline year-${year}">
                <input type="text" style="width:100px" class="form-control product-year yy-${i + 1} form-digit-5 text-center" name="product-year" readonly/>
                <span class="input-group-addon">年</span>
                <button class="btn btn-danger" onclick="deleteYearUnit(this)">
                    <i class="fa fa-times"></i>
                </button>
            </div>
        </th>
        `);
        $th.find('.product-year').val(year);
        insertSortedColumn($header, $th, year);
    });
}

//更新產品資料列
function updateProductRows($trigger) {
    const $cardBody = $trigger.closest('.card-body');
    const yearList = getYearList($cardBody);

    $cardBody.find('#product-body .product-row').each(function () {
        const $row = $(this);
        const rateMap = {};

        $row.find('td.year-col').each(function () {
            const match = $(this).attr('class').match(/year-col-(\d+)/);
            if (match) {
                const year = parseInt(match[1]);
                const rate = $(this).find('.rate-input').val();
                rateMap[year] = rate;
            }
        });

        $row.find('td.year-col').remove();

        $.each(yearList, function (i, year) {
            const rateN = i + 1;
            const $td = $(`
                <td class="year-col year-col-${year}">
                    <div class="form-inline rate-${year}">
                        <input type="text" maxlength="3" style="width: 114px" class="form-control rate-input rate-${rateN}"/>
                        <span class="input-group-text">%</span>
                    </div>
                </td>
            `);
            if (rateMap[year]) {
                $td.find('.rate-input').val(rateMap[year]);
            }
            insertSortedColumn($row, $td, year);
        });
    });
}

function insertSortedColumn($parentRow, $newColumn, year) {
    let inserted = false;

    $parentRow.children('td.year-col').each(function () {
        const currentYear = parseInt($(this).attr('class').match(/year-col-(\d+)/)?.[1]);
        if (!isNaN(currentYear) && year < currentYear) {
            $(this).before($newColumn);
            inserted = true;
            return false;
        }
    });

    if (!inserted) {
        $parentRow.append($newColumn);
    }
}

//新增產品列
function addProductTableData(obj) {
    const $cardBody = $(obj).closest('.card-body');
    const yearList = getYearList($cardBody);
    const $row = $('<tr class="product-row"></tr>');
    const productNum = $cardBody.find('.product-row').length + 1;

    $row.append(`
        <td class="d-flex">
            <button class="btn btn-danger mr-2 del-pro-btn" data-row="${productNum}" onclick="deleteProductsUnit(this)">
                <i class="fa fa-times"></i>
            </button>
            <textarea class="form-control pname" rows="1"></textarea>
        </td>
        <td style="vertical-align:middle" class="text-center">佔營收比</td>
    `);

    $.each(yearList, function (i, year) {
        const rateN = i + 1;
        const $td = $(`
            <td class="year-col year-col-${year}">
                <div class="form-inline rate-${year}">
                    <input type="text" maxlength="3" style="width: 114px" class="form-control rate-input rate-${rateN}"/>
                    <span class="input-group-text">%</span>
                </div>
            </td>
        `);
        insertSortedColumn($row, $td, year);
    });

    $cardBody.find('#product-body').append($row);
}

//刪除產品列
function deleteProductsUnit(obj){
    const $cardBody = $(obj).closest('.card-body');
    $(obj).closest('tr.product-row').remove();

    $cardBody.find('#product-body .product-row').each(function (index) {
        $(this).find('.btn-danger').attr('data-row', index + 1);
    })
}
//////////主要產品營收比重 END//////////
